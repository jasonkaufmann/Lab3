
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000410  00800100  000007a8  0000081c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001303  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000933  00000000  00000000  0000205f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000723  00000000  00000000  00002992  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  000030b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050d  00000000  00000000  000032c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b73  00000000  00000000  000037d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00004344  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	15 e0       	ldi	r17, 0x05	; 5
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b5 e0       	ldi	r27, 0x05	; 5
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c9 01 	call	0x392	; 0x392 <main>
  9e:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_command>:
void drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c, uint8_t size) {
	for (int i = 0; i<size; i++) {
		drawchar(buff, x+5*i, line, c[i]);
	}
	
}
  a6:	5c 98       	cbi	0x0b, 4	; 11
  a8:	27 e0       	ldi	r18, 0x07	; 7
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	5d 98       	cbi	0x0b, 5	; 11
  b0:	ac 01       	movw	r20, r24
  b2:	02 2e       	mov	r0, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <lcd_command+0x14>
  b6:	55 95       	asr	r21
  b8:	47 95       	ror	r20
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <lcd_command+0x10>
  be:	40 ff       	sbrs	r20, 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <lcd_command+0x20>
  c2:	5e 9a       	sbi	0x0b, 6	; 11
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <lcd_command+0x22>
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 9a       	sbi	0x0b, 5	; 11
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	31 09       	sbc	r19, r1
  ce:	78 f7       	brcc	.-34     	; 0xae <lcd_command+0x8>
  d0:	08 95       	ret

000000d2 <lcd_init>:
  d2:	56 9a       	sbi	0x0a, 6	; 10
  d4:	55 9a       	sbi	0x0a, 5	; 10
  d6:	54 9a       	sbi	0x0a, 4	; 10
  d8:	53 9a       	sbi	0x0a, 3	; 10
  da:	52 9a       	sbi	0x0a, 2	; 10
  dc:	5a 98       	cbi	0x0b, 2	; 11
  de:	5b 98       	cbi	0x0b, 3	; 11
  e0:	2f e9       	ldi	r18, 0x9F	; 159
  e2:	86 e8       	ldi	r24, 0x86	; 134
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <lcd_init+0x14>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_init+0x1e>
  f0:	00 00       	nop
  f2:	5b 9a       	sbi	0x0b, 3	; 11
  f4:	83 ea       	ldi	r24, 0xA3	; 163
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
  fa:	80 ea       	ldi	r24, 0xA0	; 160
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 100:	80 ec       	ldi	r24, 0xC0	; 192
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 106:	80 e4       	ldi	r24, 0x40	; 64
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 10c:	8c e2       	ldi	r24, 0x2C	; 44
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 112:	83 ed       	ldi	r24, 0xD3	; 211
 114:	90 e3       	ldi	r25, 0x30	; 48
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_init+0x44>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_init+0x4a>
 11c:	00 00       	nop
 11e:	8e e2       	ldi	r24, 0x2E	; 46
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_init+0x56>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_init+0x5c>
 12e:	00 00       	nop
 130:	8f e2       	ldi	r24, 0x2F	; 47
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 136:	83 ec       	ldi	r24, 0xC3	; 195
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_init+0x68>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_init+0x6e>
 140:	00 00       	nop
 142:	86 e2       	ldi	r24, 0x26	; 38
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 148:	08 95       	ret

0000014a <lcd_data>:
 14a:	5c 9a       	sbi	0x0b, 4	; 11
 14c:	27 e0       	ldi	r18, 0x07	; 7
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	5d 98       	cbi	0x0b, 5	; 11
 154:	ac 01       	movw	r20, r24
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <lcd_data+0x14>
 15a:	55 95       	asr	r21
 15c:	47 95       	ror	r20
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <lcd_data+0x10>
 162:	40 ff       	sbrs	r20, 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <lcd_data+0x20>
 166:	5e 9a       	sbi	0x0b, 6	; 11
 168:	01 c0       	rjmp	.+2      	; 0x16c <lcd_data+0x22>
 16a:	5e 98       	cbi	0x0b, 6	; 11
 16c:	5d 9a       	sbi	0x0b, 5	; 11
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	31 09       	sbc	r19, r1
 172:	78 f7       	brcc	.-34     	; 0x152 <lcd_data+0x8>
 174:	08 95       	ret

00000176 <lcd_set_brightness>:
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
 17a:	81 e8       	ldi	r24, 0x81	; 129
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 180:	8c 2f       	mov	r24, r28
 182:	8f 73       	andi	r24, 0x3F	; 63
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <write_buffer>:
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	0f 2e       	mov	r0, r31
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ef 2e       	mov	r14, r31
 1a2:	f5 e0       	ldi	r31, 0x05	; 5
 1a4:	ff 2e       	mov	r15, r31
 1a6:	f0 2d       	mov	r31, r0
 1a8:	ec 01       	movw	r28, r24
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f0 e1       	ldi	r31, 0x10	; 16
 1ae:	cf 2e       	mov	r12, r31
 1b0:	f5 e0       	ldi	r31, 0x05	; 5
 1b2:	df 2e       	mov	r13, r31
 1b4:	f0 2d       	mov	r31, r0
 1b6:	f7 01       	movw	r30, r14
 1b8:	80 81       	ld	r24, Z
 1ba:	f2 e0       	ldi	r31, 0x02	; 2
 1bc:	ef 0e       	add	r14, r31
 1be:	f1 1c       	adc	r15, r1
 1c0:	80 6b       	ori	r24, 0xB0	; 176
 1c2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1cc:	80 e1       	ldi	r24, 0x10	; 16
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1d2:	80 ee       	ldi	r24, 0xE0	; 224
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_data>
 1de:	8e 01       	movw	r16, r28
 1e0:	00 58       	subi	r16, 0x80	; 128
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	89 91       	ld	r24, Y+
 1e6:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_data>
 1ea:	c0 17       	cp	r28, r16
 1ec:	d1 07       	cpc	r29, r17
 1ee:	d1 f7       	brne	.-12     	; 0x1e4 <write_buffer+0x58>
 1f0:	e8 01       	movw	r28, r16
 1f2:	ce 14       	cp	r12, r14
 1f4:	df 04       	cpc	r13, r15
 1f6:	f9 f6       	brne	.-66     	; 0x1b6 <write_buffer+0x2a>
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	08 95       	ret

0000020a <clear_buffer>:
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	34 e0       	ldi	r19, 0x04	; 4
 20e:	fc 01       	movw	r30, r24
 210:	a9 01       	movw	r20, r18
 212:	11 92       	st	Z+, r1
 214:	41 50       	subi	r20, 0x01	; 1
 216:	50 40       	sbci	r21, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <clear_buffer+0x8>
 21a:	08 95       	ret

0000021c <setpixel>:
 21c:	34 2f       	mov	r19, r20
 21e:	36 95       	lsr	r19
 220:	36 95       	lsr	r19
 222:	36 95       	lsr	r19
 224:	50 e8       	ldi	r21, 0x80	; 128
 226:	35 9f       	mul	r19, r21
 228:	80 0d       	add	r24, r0
 22a:	91 1d       	adc	r25, r1
 22c:	11 24       	eor	r1, r1
 22e:	fc 01       	movw	r30, r24
 230:	e6 0f       	add	r30, r22
 232:	f1 1d       	adc	r31, r1
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	40 95       	com	r20
 23a:	50 95       	com	r21
 23c:	47 70       	andi	r20, 0x07	; 7
 23e:	55 27       	eor	r21, r21
 240:	01 c0       	rjmp	.+2      	; 0x244 <setpixel+0x28>
 242:	22 0f       	add	r18, r18
 244:	4a 95       	dec	r20
 246:	ea f7       	brpl	.-6      	; 0x242 <setpixel+0x26>
 248:	20 83       	st	Z, r18
 24a:	08 95       	ret

0000024c <drawline>:

// use bresenham's algorithm to write this function to draw a line
void drawline(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint8_t color) {
 24c:	2f 92       	push	r2
 24e:	3f 92       	push	r3
 250:	4f 92       	push	r4
 252:	5f 92       	push	r5
 254:	6f 92       	push	r6
 256:	7f 92       	push	r7
 258:	8f 92       	push	r8
 25a:	9f 92       	push	r9
 25c:	af 92       	push	r10
 25e:	bf 92       	push	r11
 260:	cf 92       	push	r12
 262:	df 92       	push	r13
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	00 d0       	rcall	.+0      	; 0x272 <drawline+0x26>
 272:	1f 92       	push	r1
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	4c 01       	movw	r8, r24
 27a:	e9 82       	std	Y+1, r14	; 0x01
         //plot(x,y)
         //error := error + deltaerr
         //if error ? 0.5 then
             //y := y + sign(deltay) * 1
             //error := error - 1.0
	int deltax = x1-x0;
 27c:	e2 2e       	mov	r14, r18
 27e:	f1 2c       	mov	r15, r1
 280:	86 2f       	mov	r24, r22
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	9b 83       	std	Y+3, r25	; 0x03
 286:	8a 83       	std	Y+2, r24	; 0x02
	int deltay = y1-y0;
 288:	a4 2e       	mov	r10, r20
 28a:	b1 2c       	mov	r11, r1
 28c:	c0 2e       	mov	r12, r16
 28e:	d1 2c       	mov	r13, r1
 290:	ca 18       	sub	r12, r10
 292:	db 08       	sbc	r13, r11
	int sign = 1;
	float deltaerr = abs((float)deltay/(float)deltax); 
 294:	b6 01       	movw	r22, r12
 296:	0d 2c       	mov	r0, r13
 298:	00 0c       	add	r0, r0
 29a:	88 0b       	sbc	r24, r24
 29c:	99 0b       	sbc	r25, r25
 29e:	0e 94 1d 03 	call	0x63a	; 0x63a <__floatsisf>
 2a2:	2b 01       	movw	r4, r22
 2a4:	3c 01       	movw	r6, r24
 2a6:	b7 01       	movw	r22, r14
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	9b 81       	ldd	r25, Y+3	; 0x03
 2ac:	68 1b       	sub	r22, r24
 2ae:	79 0b       	sbc	r23, r25
 2b0:	07 2e       	mov	r0, r23
 2b2:	00 0c       	add	r0, r0
 2b4:	88 0b       	sbc	r24, r24
 2b6:	99 0b       	sbc	r25, r25
 2b8:	0e 94 1d 03 	call	0x63a	; 0x63a <__floatsisf>
 2bc:	9b 01       	movw	r18, r22
 2be:	ac 01       	movw	r20, r24
 2c0:	c3 01       	movw	r24, r6
 2c2:	b2 01       	movw	r22, r4
 2c4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__divsf3>
 2c8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__fixsfsi>
 2cc:	9b 01       	movw	r18, r22
 2ce:	77 23       	and	r23, r23
 2d0:	24 f4       	brge	.+8      	; 0x2da <drawline+0x8e>
 2d2:	22 27       	eor	r18, r18
 2d4:	33 27       	eor	r19, r19
 2d6:	26 1b       	sub	r18, r22
 2d8:	37 0b       	sbc	r19, r23
 2da:	b9 01       	movw	r22, r18
 2dc:	33 0f       	add	r19, r19
 2de:	88 0b       	sbc	r24, r24
 2e0:	99 0b       	sbc	r25, r25
 2e2:	0e 94 1d 03 	call	0x63a	; 0x63a <__floatsisf>
 2e6:	2b 01       	movw	r4, r22
 2e8:	3c 01       	movw	r6, r24
	float error = 0.0;
	int y = y0;
	for(int x = x0; x < x1+1; x++) {
 2ea:	87 01       	movw	r16, r14
 2ec:	0f 5f       	subi	r16, 0xFF	; 255
 2ee:	1f 4f       	sbci	r17, 0xFF	; 255
 2f0:	8a 81       	ldd	r24, Y+2	; 0x02
 2f2:	9b 81       	ldd	r25, Y+3	; 0x03
 2f4:	80 17       	cp	r24, r16
 2f6:	91 07       	cpc	r25, r17
 2f8:	b4 f5       	brge	.+108    	; 0x366 <drawline+0x11a>
 2fa:	dd 20       	and	r13, r13
 2fc:	1c f4       	brge	.+6      	; 0x304 <drawline+0xb8>
 2fe:	9f ef       	ldi	r25, 0xFF	; 255
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	02 c0       	rjmp	.+4      	; 0x308 <drawline+0xbc>
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	29 2e       	mov	r2, r25
 30a:	38 2e       	mov	r3, r24
 30c:	c1 2c       	mov	r12, r1
 30e:	d1 2c       	mov	r13, r1
 310:	76 01       	movw	r14, r12
		setpixel(buff,x,y,color);
 312:	29 81       	ldd	r18, Y+1	; 0x01
 314:	4a 2d       	mov	r20, r10
 316:	6a 81       	ldd	r22, Y+2	; 0x02
 318:	c4 01       	movw	r24, r8
 31a:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
		error += deltaerr;
 31e:	a3 01       	movw	r20, r6
 320:	92 01       	movw	r18, r4
 322:	c7 01       	movw	r24, r14
 324:	b6 01       	movw	r22, r12
 326:	0e 94 07 02 	call	0x40e	; 0x40e <__addsf3>
 32a:	6b 01       	movw	r12, r22
 32c:	7c 01       	movw	r14, r24
		if (error >= 0.5) {
 32e:	20 e0       	ldi	r18, 0x00	; 0
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	5f e3       	ldi	r21, 0x3F	; 63
 336:	0e 94 a9 03 	call	0x752	; 0x752 <__gesf2>
 33a:	88 23       	and	r24, r24
 33c:	64 f0       	brlt	.+24     	; 0x356 <drawline+0x10a>
				sign = -1;
			}
			else {
				sign = 1;
			}
			y = y + sign;
 33e:	a2 0c       	add	r10, r2
 340:	b3 1c       	adc	r11, r3
			error = error - 1.0;
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	40 e8       	ldi	r20, 0x80	; 128
 348:	5f e3       	ldi	r21, 0x3F	; 63
 34a:	c7 01       	movw	r24, r14
 34c:	b6 01       	movw	r22, r12
 34e:	0e 94 06 02 	call	0x40c	; 0x40c <__subsf3>
 352:	6b 01       	movw	r12, r22
 354:	7c 01       	movw	r14, r24
	int deltay = y1-y0;
	int sign = 1;
	float deltaerr = abs((float)deltay/(float)deltax); 
	float error = 0.0;
	int y = y0;
	for(int x = x0; x < x1+1; x++) {
 356:	8a 81       	ldd	r24, Y+2	; 0x02
 358:	9b 81       	ldd	r25, Y+3	; 0x03
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	9b 83       	std	Y+3, r25	; 0x03
 35e:	8a 83       	std	Y+2, r24	; 0x02
 360:	80 17       	cp	r24, r16
 362:	91 07       	cpc	r25, r17
 364:	b4 f2       	brlt	.-84     	; 0x312 <drawline+0xc6>
			}
			y = y + sign;
			error = error - 1.0;
		}
	}
}
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	ff 90       	pop	r15
 376:	ef 90       	pop	r14
 378:	df 90       	pop	r13
 37a:	cf 90       	pop	r12
 37c:	bf 90       	pop	r11
 37e:	af 90       	pop	r10
 380:	9f 90       	pop	r9
 382:	8f 90       	pop	r8
 384:	7f 90       	pop	r7
 386:	6f 90       	pop	r6
 388:	5f 90       	pop	r5
 38a:	4f 90       	pop	r4
 38c:	3f 90       	pop	r3
 38e:	2f 90       	pop	r2
 390:	08 95       	ret

00000392 <main>:


int main(void)
{
	//setting up the gpio for backlight
	DDRD |= 0x80;
 392:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~0x80;
 394:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= 0x00;
 396:	8b b1       	in	r24, 0x0b	; 11
 398:	8b b9       	out	0x0b, r24	; 11
	
	DDRB |= 0x05;
 39a:	84 b1       	in	r24, 0x04	; 4
 39c:	85 60       	ori	r24, 0x05	; 5
 39e:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~0x05;
 3a0:	85 b1       	in	r24, 0x05	; 5
 3a2:	8a 7f       	andi	r24, 0xFA	; 250
 3a4:	85 b9       	out	0x05, r24	; 5
	PORTB |= 0x00;
 3a6:	85 b1       	in	r24, 0x05	; 5
 3a8:	85 b9       	out	0x05, r24	; 5
	
	//lcd initialisation
	lcd_init();
 3aa:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_init>
	lcd_command(CMD_DISPLAY_ON);
 3ae:	8f ea       	ldi	r24, 0xAF	; 175
 3b0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_set_brightness(0x18);
 3b4:	88 e1       	ldi	r24, 0x18	; 24
 3b6:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_set_brightness>
	write_buffer(buff);
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 c6 00 	call	0x18c	; 0x18c <write_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	83 ed       	ldi	r24, 0xD3	; 211
 3c6:	90 e3       	ldi	r25, 0x30	; 48
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x36>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x40>
 3d2:	00 00       	nop
	_delay_ms(1000); //10k
	clear_buffer(buff);
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 05 01 	call	0x20a	; 0x20a <clear_buffer>
	while (1)
	{
		//drawchar(buff,64,0,displayChar);
		//setpixel(buff, 64, 32, 1);
		int size = sizeof(String);
		drawline(buff,1,1,64,32,1);
 3dc:	ee 24       	eor	r14, r14
 3de:	e3 94       	inc	r14
 3e0:	00 e2       	ldi	r16, 0x20	; 32
 3e2:	20 e4       	ldi	r18, 0x40	; 64
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	0e 94 26 01 	call	0x24c	; 0x24c <drawline>
		write_buffer(buff);
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 c6 00 	call	0x18c	; 0x18c <write_buffer>
 3f8:	2f ef       	ldi	r18, 0xFF	; 255
 3fa:	83 ed       	ldi	r24, 0xD3	; 211
 3fc:	90 e3       	ldi	r25, 0x30	; 48
 3fe:	21 50       	subi	r18, 0x01	; 1
 400:	80 40       	sbci	r24, 0x00	; 0
 402:	90 40       	sbci	r25, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <main+0x6c>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	00 00       	nop
 40a:	e8 cf       	rjmp	.-48     	; 0x3dc <main+0x4a>

0000040c <__subsf3>:
 40c:	50 58       	subi	r21, 0x80	; 128

0000040e <__addsf3>:
 40e:	bb 27       	eor	r27, r27
 410:	aa 27       	eor	r26, r26
 412:	0e 94 1e 02 	call	0x43c	; 0x43c <__addsf3x>
 416:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__fp_round>
 41a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fp_pscA>
 41e:	38 f0       	brcs	.+14     	; 0x42e <__addsf3+0x20>
 420:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__fp_pscB>
 424:	20 f0       	brcs	.+8      	; 0x42e <__addsf3+0x20>
 426:	39 f4       	brne	.+14     	; 0x436 <__addsf3+0x28>
 428:	9f 3f       	cpi	r25, 0xFF	; 255
 42a:	19 f4       	brne	.+6      	; 0x432 <__addsf3+0x24>
 42c:	26 f4       	brtc	.+8      	; 0x436 <__addsf3+0x28>
 42e:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_nan>
 432:	0e f4       	brtc	.+2      	; 0x436 <__addsf3+0x28>
 434:	e0 95       	com	r30
 436:	e7 fb       	bst	r30, 7
 438:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_inf>

0000043c <__addsf3x>:
 43c:	e9 2f       	mov	r30, r25
 43e:	0e 94 80 03 	call	0x700	; 0x700 <__fp_split3>
 442:	58 f3       	brcs	.-42     	; 0x41a <__addsf3+0xc>
 444:	ba 17       	cp	r27, r26
 446:	62 07       	cpc	r22, r18
 448:	73 07       	cpc	r23, r19
 44a:	84 07       	cpc	r24, r20
 44c:	95 07       	cpc	r25, r21
 44e:	20 f0       	brcs	.+8      	; 0x458 <__addsf3x+0x1c>
 450:	79 f4       	brne	.+30     	; 0x470 <__addsf3x+0x34>
 452:	a6 f5       	brtc	.+104    	; 0x4bc <__addsf3x+0x80>
 454:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_zero>
 458:	0e f4       	brtc	.+2      	; 0x45c <__addsf3x+0x20>
 45a:	e0 95       	com	r30
 45c:	0b 2e       	mov	r0, r27
 45e:	ba 2f       	mov	r27, r26
 460:	a0 2d       	mov	r26, r0
 462:	0b 01       	movw	r0, r22
 464:	b9 01       	movw	r22, r18
 466:	90 01       	movw	r18, r0
 468:	0c 01       	movw	r0, r24
 46a:	ca 01       	movw	r24, r20
 46c:	a0 01       	movw	r20, r0
 46e:	11 24       	eor	r1, r1
 470:	ff 27       	eor	r31, r31
 472:	59 1b       	sub	r21, r25
 474:	99 f0       	breq	.+38     	; 0x49c <__addsf3x+0x60>
 476:	59 3f       	cpi	r21, 0xF9	; 249
 478:	50 f4       	brcc	.+20     	; 0x48e <__addsf3x+0x52>
 47a:	50 3e       	cpi	r21, 0xE0	; 224
 47c:	68 f1       	brcs	.+90     	; 0x4d8 <__addsf3x+0x9c>
 47e:	1a 16       	cp	r1, r26
 480:	f0 40       	sbci	r31, 0x00	; 0
 482:	a2 2f       	mov	r26, r18
 484:	23 2f       	mov	r18, r19
 486:	34 2f       	mov	r19, r20
 488:	44 27       	eor	r20, r20
 48a:	58 5f       	subi	r21, 0xF8	; 248
 48c:	f3 cf       	rjmp	.-26     	; 0x474 <__addsf3x+0x38>
 48e:	46 95       	lsr	r20
 490:	37 95       	ror	r19
 492:	27 95       	ror	r18
 494:	a7 95       	ror	r26
 496:	f0 40       	sbci	r31, 0x00	; 0
 498:	53 95       	inc	r21
 49a:	c9 f7       	brne	.-14     	; 0x48e <__addsf3x+0x52>
 49c:	7e f4       	brtc	.+30     	; 0x4bc <__addsf3x+0x80>
 49e:	1f 16       	cp	r1, r31
 4a0:	ba 0b       	sbc	r27, r26
 4a2:	62 0b       	sbc	r22, r18
 4a4:	73 0b       	sbc	r23, r19
 4a6:	84 0b       	sbc	r24, r20
 4a8:	ba f0       	brmi	.+46     	; 0x4d8 <__addsf3x+0x9c>
 4aa:	91 50       	subi	r25, 0x01	; 1
 4ac:	a1 f0       	breq	.+40     	; 0x4d6 <__addsf3x+0x9a>
 4ae:	ff 0f       	add	r31, r31
 4b0:	bb 1f       	adc	r27, r27
 4b2:	66 1f       	adc	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	88 1f       	adc	r24, r24
 4b8:	c2 f7       	brpl	.-16     	; 0x4aa <__addsf3x+0x6e>
 4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <__addsf3x+0x9c>
 4bc:	ba 0f       	add	r27, r26
 4be:	62 1f       	adc	r22, r18
 4c0:	73 1f       	adc	r23, r19
 4c2:	84 1f       	adc	r24, r20
 4c4:	48 f4       	brcc	.+18     	; 0x4d8 <__addsf3x+0x9c>
 4c6:	87 95       	ror	r24
 4c8:	77 95       	ror	r23
 4ca:	67 95       	ror	r22
 4cc:	b7 95       	ror	r27
 4ce:	f7 95       	ror	r31
 4d0:	9e 3f       	cpi	r25, 0xFE	; 254
 4d2:	08 f0       	brcs	.+2      	; 0x4d6 <__addsf3x+0x9a>
 4d4:	b0 cf       	rjmp	.-160    	; 0x436 <__addsf3+0x28>
 4d6:	93 95       	inc	r25
 4d8:	88 0f       	add	r24, r24
 4da:	08 f0       	brcs	.+2      	; 0x4de <__addsf3x+0xa2>
 4dc:	99 27       	eor	r25, r25
 4de:	ee 0f       	add	r30, r30
 4e0:	97 95       	ror	r25
 4e2:	87 95       	ror	r24
 4e4:	08 95       	ret

000004e6 <__divsf3>:
 4e6:	0e 94 87 02 	call	0x50e	; 0x50e <__divsf3x>
 4ea:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__fp_round>
 4ee:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__fp_pscB>
 4f2:	58 f0       	brcs	.+22     	; 0x50a <__divsf3+0x24>
 4f4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fp_pscA>
 4f8:	40 f0       	brcs	.+16     	; 0x50a <__divsf3+0x24>
 4fa:	29 f4       	brne	.+10     	; 0x506 <__divsf3+0x20>
 4fc:	5f 3f       	cpi	r21, 0xFF	; 255
 4fe:	29 f0       	breq	.+10     	; 0x50a <__divsf3+0x24>
 500:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_inf>
 504:	51 11       	cpse	r21, r1
 506:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_szero>
 50a:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_nan>

0000050e <__divsf3x>:
 50e:	0e 94 80 03 	call	0x700	; 0x700 <__fp_split3>
 512:	68 f3       	brcs	.-38     	; 0x4ee <__divsf3+0x8>

00000514 <__divsf3_pse>:
 514:	99 23       	and	r25, r25
 516:	b1 f3       	breq	.-20     	; 0x504 <__divsf3+0x1e>
 518:	55 23       	and	r21, r21
 51a:	91 f3       	breq	.-28     	; 0x500 <__divsf3+0x1a>
 51c:	95 1b       	sub	r25, r21
 51e:	55 0b       	sbc	r21, r21
 520:	bb 27       	eor	r27, r27
 522:	aa 27       	eor	r26, r26
 524:	62 17       	cp	r22, r18
 526:	73 07       	cpc	r23, r19
 528:	84 07       	cpc	r24, r20
 52a:	38 f0       	brcs	.+14     	; 0x53a <__divsf3_pse+0x26>
 52c:	9f 5f       	subi	r25, 0xFF	; 255
 52e:	5f 4f       	sbci	r21, 0xFF	; 255
 530:	22 0f       	add	r18, r18
 532:	33 1f       	adc	r19, r19
 534:	44 1f       	adc	r20, r20
 536:	aa 1f       	adc	r26, r26
 538:	a9 f3       	breq	.-22     	; 0x524 <__divsf3_pse+0x10>
 53a:	35 d0       	rcall	.+106    	; 0x5a6 <__divsf3_pse+0x92>
 53c:	0e 2e       	mov	r0, r30
 53e:	3a f0       	brmi	.+14     	; 0x54e <__divsf3_pse+0x3a>
 540:	e0 e8       	ldi	r30, 0x80	; 128
 542:	32 d0       	rcall	.+100    	; 0x5a8 <__divsf3_pse+0x94>
 544:	91 50       	subi	r25, 0x01	; 1
 546:	50 40       	sbci	r21, 0x00	; 0
 548:	e6 95       	lsr	r30
 54a:	00 1c       	adc	r0, r0
 54c:	ca f7       	brpl	.-14     	; 0x540 <__divsf3_pse+0x2c>
 54e:	2b d0       	rcall	.+86     	; 0x5a6 <__divsf3_pse+0x92>
 550:	fe 2f       	mov	r31, r30
 552:	29 d0       	rcall	.+82     	; 0x5a6 <__divsf3_pse+0x92>
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	88 1f       	adc	r24, r24
 55a:	bb 1f       	adc	r27, r27
 55c:	26 17       	cp	r18, r22
 55e:	37 07       	cpc	r19, r23
 560:	48 07       	cpc	r20, r24
 562:	ab 07       	cpc	r26, r27
 564:	b0 e8       	ldi	r27, 0x80	; 128
 566:	09 f0       	breq	.+2      	; 0x56a <__divsf3_pse+0x56>
 568:	bb 0b       	sbc	r27, r27
 56a:	80 2d       	mov	r24, r0
 56c:	bf 01       	movw	r22, r30
 56e:	ff 27       	eor	r31, r31
 570:	93 58       	subi	r25, 0x83	; 131
 572:	5f 4f       	sbci	r21, 0xFF	; 255
 574:	3a f0       	brmi	.+14     	; 0x584 <__divsf3_pse+0x70>
 576:	9e 3f       	cpi	r25, 0xFE	; 254
 578:	51 05       	cpc	r21, r1
 57a:	78 f0       	brcs	.+30     	; 0x59a <__divsf3_pse+0x86>
 57c:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_inf>
 580:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_szero>
 584:	5f 3f       	cpi	r21, 0xFF	; 255
 586:	e4 f3       	brlt	.-8      	; 0x580 <__divsf3_pse+0x6c>
 588:	98 3e       	cpi	r25, 0xE8	; 232
 58a:	d4 f3       	brlt	.-12     	; 0x580 <__divsf3_pse+0x6c>
 58c:	86 95       	lsr	r24
 58e:	77 95       	ror	r23
 590:	67 95       	ror	r22
 592:	b7 95       	ror	r27
 594:	f7 95       	ror	r31
 596:	9f 5f       	subi	r25, 0xFF	; 255
 598:	c9 f7       	brne	.-14     	; 0x58c <__divsf3_pse+0x78>
 59a:	88 0f       	add	r24, r24
 59c:	91 1d       	adc	r25, r1
 59e:	96 95       	lsr	r25
 5a0:	87 95       	ror	r24
 5a2:	97 f9       	bld	r25, 7
 5a4:	08 95       	ret
 5a6:	e1 e0       	ldi	r30, 0x01	; 1
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	bb 1f       	adc	r27, r27
 5b0:	62 17       	cp	r22, r18
 5b2:	73 07       	cpc	r23, r19
 5b4:	84 07       	cpc	r24, r20
 5b6:	ba 07       	cpc	r27, r26
 5b8:	20 f0       	brcs	.+8      	; 0x5c2 <__divsf3_pse+0xae>
 5ba:	62 1b       	sub	r22, r18
 5bc:	73 0b       	sbc	r23, r19
 5be:	84 0b       	sbc	r24, r20
 5c0:	ba 0b       	sbc	r27, r26
 5c2:	ee 1f       	adc	r30, r30
 5c4:	88 f7       	brcc	.-30     	; 0x5a8 <__divsf3_pse+0x94>
 5c6:	e0 95       	com	r30
 5c8:	08 95       	ret

000005ca <__fixsfsi>:
 5ca:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__fixunssfsi>
 5ce:	68 94       	set
 5d0:	b1 11       	cpse	r27, r1
 5d2:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_szero>
 5d6:	08 95       	ret

000005d8 <__fixunssfsi>:
 5d8:	0e 94 88 03 	call	0x710	; 0x710 <__fp_splitA>
 5dc:	88 f0       	brcs	.+34     	; 0x600 <__fixunssfsi+0x28>
 5de:	9f 57       	subi	r25, 0x7F	; 127
 5e0:	98 f0       	brcs	.+38     	; 0x608 <__fixunssfsi+0x30>
 5e2:	b9 2f       	mov	r27, r25
 5e4:	99 27       	eor	r25, r25
 5e6:	b7 51       	subi	r27, 0x17	; 23
 5e8:	b0 f0       	brcs	.+44     	; 0x616 <__fixunssfsi+0x3e>
 5ea:	e1 f0       	breq	.+56     	; 0x624 <__fixunssfsi+0x4c>
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	1a f0       	brmi	.+6      	; 0x5fc <__fixunssfsi+0x24>
 5f6:	ba 95       	dec	r27
 5f8:	c9 f7       	brne	.-14     	; 0x5ec <__fixunssfsi+0x14>
 5fa:	14 c0       	rjmp	.+40     	; 0x624 <__fixunssfsi+0x4c>
 5fc:	b1 30       	cpi	r27, 0x01	; 1
 5fe:	91 f0       	breq	.+36     	; 0x624 <__fixunssfsi+0x4c>
 600:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_zero>
 604:	b1 e0       	ldi	r27, 0x01	; 1
 606:	08 95       	ret
 608:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_zero>
 60c:	67 2f       	mov	r22, r23
 60e:	78 2f       	mov	r23, r24
 610:	88 27       	eor	r24, r24
 612:	b8 5f       	subi	r27, 0xF8	; 248
 614:	39 f0       	breq	.+14     	; 0x624 <__fixunssfsi+0x4c>
 616:	b9 3f       	cpi	r27, 0xF9	; 249
 618:	cc f3       	brlt	.-14     	; 0x60c <__fixunssfsi+0x34>
 61a:	86 95       	lsr	r24
 61c:	77 95       	ror	r23
 61e:	67 95       	ror	r22
 620:	b3 95       	inc	r27
 622:	d9 f7       	brne	.-10     	; 0x61a <__fixunssfsi+0x42>
 624:	3e f4       	brtc	.+14     	; 0x634 <__fixunssfsi+0x5c>
 626:	90 95       	com	r25
 628:	80 95       	com	r24
 62a:	70 95       	com	r23
 62c:	61 95       	neg	r22
 62e:	7f 4f       	sbci	r23, 0xFF	; 255
 630:	8f 4f       	sbci	r24, 0xFF	; 255
 632:	9f 4f       	sbci	r25, 0xFF	; 255
 634:	08 95       	ret

00000636 <__floatunsisf>:
 636:	e8 94       	clt
 638:	09 c0       	rjmp	.+18     	; 0x64c <__floatsisf+0x12>

0000063a <__floatsisf>:
 63a:	97 fb       	bst	r25, 7
 63c:	3e f4       	brtc	.+14     	; 0x64c <__floatsisf+0x12>
 63e:	90 95       	com	r25
 640:	80 95       	com	r24
 642:	70 95       	com	r23
 644:	61 95       	neg	r22
 646:	7f 4f       	sbci	r23, 0xFF	; 255
 648:	8f 4f       	sbci	r24, 0xFF	; 255
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	99 23       	and	r25, r25
 64e:	a9 f0       	breq	.+42     	; 0x67a <__floatsisf+0x40>
 650:	f9 2f       	mov	r31, r25
 652:	96 e9       	ldi	r25, 0x96	; 150
 654:	bb 27       	eor	r27, r27
 656:	93 95       	inc	r25
 658:	f6 95       	lsr	r31
 65a:	87 95       	ror	r24
 65c:	77 95       	ror	r23
 65e:	67 95       	ror	r22
 660:	b7 95       	ror	r27
 662:	f1 11       	cpse	r31, r1
 664:	f8 cf       	rjmp	.-16     	; 0x656 <__floatsisf+0x1c>
 666:	fa f4       	brpl	.+62     	; 0x6a6 <__floatsisf+0x6c>
 668:	bb 0f       	add	r27, r27
 66a:	11 f4       	brne	.+4      	; 0x670 <__floatsisf+0x36>
 66c:	60 ff       	sbrs	r22, 0
 66e:	1b c0       	rjmp	.+54     	; 0x6a6 <__floatsisf+0x6c>
 670:	6f 5f       	subi	r22, 0xFF	; 255
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	8f 4f       	sbci	r24, 0xFF	; 255
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	16 c0       	rjmp	.+44     	; 0x6a6 <__floatsisf+0x6c>
 67a:	88 23       	and	r24, r24
 67c:	11 f0       	breq	.+4      	; 0x682 <__floatsisf+0x48>
 67e:	96 e9       	ldi	r25, 0x96	; 150
 680:	11 c0       	rjmp	.+34     	; 0x6a4 <__floatsisf+0x6a>
 682:	77 23       	and	r23, r23
 684:	21 f0       	breq	.+8      	; 0x68e <__floatsisf+0x54>
 686:	9e e8       	ldi	r25, 0x8E	; 142
 688:	87 2f       	mov	r24, r23
 68a:	76 2f       	mov	r23, r22
 68c:	05 c0       	rjmp	.+10     	; 0x698 <__floatsisf+0x5e>
 68e:	66 23       	and	r22, r22
 690:	71 f0       	breq	.+28     	; 0x6ae <__floatsisf+0x74>
 692:	96 e8       	ldi	r25, 0x86	; 134
 694:	86 2f       	mov	r24, r22
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	2a f0       	brmi	.+10     	; 0x6a6 <__floatsisf+0x6c>
 69c:	9a 95       	dec	r25
 69e:	66 0f       	add	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	88 1f       	adc	r24, r24
 6a4:	da f7       	brpl	.-10     	; 0x69c <__floatsisf+0x62>
 6a6:	88 0f       	add	r24, r24
 6a8:	96 95       	lsr	r25
 6aa:	87 95       	ror	r24
 6ac:	97 f9       	bld	r25, 7
 6ae:	08 95       	ret

000006b0 <__fp_inf>:
 6b0:	97 f9       	bld	r25, 7
 6b2:	9f 67       	ori	r25, 0x7F	; 127
 6b4:	80 e8       	ldi	r24, 0x80	; 128
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	08 95       	ret

000006bc <__fp_nan>:
 6bc:	9f ef       	ldi	r25, 0xFF	; 255
 6be:	80 ec       	ldi	r24, 0xC0	; 192
 6c0:	08 95       	ret

000006c2 <__fp_pscA>:
 6c2:	00 24       	eor	r0, r0
 6c4:	0a 94       	dec	r0
 6c6:	16 16       	cp	r1, r22
 6c8:	17 06       	cpc	r1, r23
 6ca:	18 06       	cpc	r1, r24
 6cc:	09 06       	cpc	r0, r25
 6ce:	08 95       	ret

000006d0 <__fp_pscB>:
 6d0:	00 24       	eor	r0, r0
 6d2:	0a 94       	dec	r0
 6d4:	12 16       	cp	r1, r18
 6d6:	13 06       	cpc	r1, r19
 6d8:	14 06       	cpc	r1, r20
 6da:	05 06       	cpc	r0, r21
 6dc:	08 95       	ret

000006de <__fp_round>:
 6de:	09 2e       	mov	r0, r25
 6e0:	03 94       	inc	r0
 6e2:	00 0c       	add	r0, r0
 6e4:	11 f4       	brne	.+4      	; 0x6ea <__fp_round+0xc>
 6e6:	88 23       	and	r24, r24
 6e8:	52 f0       	brmi	.+20     	; 0x6fe <__fp_round+0x20>
 6ea:	bb 0f       	add	r27, r27
 6ec:	40 f4       	brcc	.+16     	; 0x6fe <__fp_round+0x20>
 6ee:	bf 2b       	or	r27, r31
 6f0:	11 f4       	brne	.+4      	; 0x6f6 <__fp_round+0x18>
 6f2:	60 ff       	sbrs	r22, 0
 6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__fp_round+0x20>
 6f6:	6f 5f       	subi	r22, 0xFF	; 255
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255
 6fa:	8f 4f       	sbci	r24, 0xFF	; 255
 6fc:	9f 4f       	sbci	r25, 0xFF	; 255
 6fe:	08 95       	ret

00000700 <__fp_split3>:
 700:	57 fd       	sbrc	r21, 7
 702:	90 58       	subi	r25, 0x80	; 128
 704:	44 0f       	add	r20, r20
 706:	55 1f       	adc	r21, r21
 708:	59 f0       	breq	.+22     	; 0x720 <__fp_splitA+0x10>
 70a:	5f 3f       	cpi	r21, 0xFF	; 255
 70c:	71 f0       	breq	.+28     	; 0x72a <__fp_splitA+0x1a>
 70e:	47 95       	ror	r20

00000710 <__fp_splitA>:
 710:	88 0f       	add	r24, r24
 712:	97 fb       	bst	r25, 7
 714:	99 1f       	adc	r25, r25
 716:	61 f0       	breq	.+24     	; 0x730 <__fp_splitA+0x20>
 718:	9f 3f       	cpi	r25, 0xFF	; 255
 71a:	79 f0       	breq	.+30     	; 0x73a <__fp_splitA+0x2a>
 71c:	87 95       	ror	r24
 71e:	08 95       	ret
 720:	12 16       	cp	r1, r18
 722:	13 06       	cpc	r1, r19
 724:	14 06       	cpc	r1, r20
 726:	55 1f       	adc	r21, r21
 728:	f2 cf       	rjmp	.-28     	; 0x70e <__fp_split3+0xe>
 72a:	46 95       	lsr	r20
 72c:	f1 df       	rcall	.-30     	; 0x710 <__fp_splitA>
 72e:	08 c0       	rjmp	.+16     	; 0x740 <__fp_splitA+0x30>
 730:	16 16       	cp	r1, r22
 732:	17 06       	cpc	r1, r23
 734:	18 06       	cpc	r1, r24
 736:	99 1f       	adc	r25, r25
 738:	f1 cf       	rjmp	.-30     	; 0x71c <__fp_splitA+0xc>
 73a:	86 95       	lsr	r24
 73c:	71 05       	cpc	r23, r1
 73e:	61 05       	cpc	r22, r1
 740:	08 94       	sec
 742:	08 95       	ret

00000744 <__fp_zero>:
 744:	e8 94       	clt

00000746 <__fp_szero>:
 746:	bb 27       	eor	r27, r27
 748:	66 27       	eor	r22, r22
 74a:	77 27       	eor	r23, r23
 74c:	cb 01       	movw	r24, r22
 74e:	97 f9       	bld	r25, 7
 750:	08 95       	ret

00000752 <__gesf2>:
 752:	0e 94 ae 03 	call	0x75c	; 0x75c <__fp_cmp>
 756:	08 f4       	brcc	.+2      	; 0x75a <__gesf2+0x8>
 758:	8f ef       	ldi	r24, 0xFF	; 255
 75a:	08 95       	ret

0000075c <__fp_cmp>:
 75c:	99 0f       	add	r25, r25
 75e:	00 08       	sbc	r0, r0
 760:	55 0f       	add	r21, r21
 762:	aa 0b       	sbc	r26, r26
 764:	e0 e8       	ldi	r30, 0x80	; 128
 766:	fe ef       	ldi	r31, 0xFE	; 254
 768:	16 16       	cp	r1, r22
 76a:	17 06       	cpc	r1, r23
 76c:	e8 07       	cpc	r30, r24
 76e:	f9 07       	cpc	r31, r25
 770:	c0 f0       	brcs	.+48     	; 0x7a2 <__fp_cmp+0x46>
 772:	12 16       	cp	r1, r18
 774:	13 06       	cpc	r1, r19
 776:	e4 07       	cpc	r30, r20
 778:	f5 07       	cpc	r31, r21
 77a:	98 f0       	brcs	.+38     	; 0x7a2 <__fp_cmp+0x46>
 77c:	62 1b       	sub	r22, r18
 77e:	73 0b       	sbc	r23, r19
 780:	84 0b       	sbc	r24, r20
 782:	95 0b       	sbc	r25, r21
 784:	39 f4       	brne	.+14     	; 0x794 <__fp_cmp+0x38>
 786:	0a 26       	eor	r0, r26
 788:	61 f0       	breq	.+24     	; 0x7a2 <__fp_cmp+0x46>
 78a:	23 2b       	or	r18, r19
 78c:	24 2b       	or	r18, r20
 78e:	25 2b       	or	r18, r21
 790:	21 f4       	brne	.+8      	; 0x79a <__fp_cmp+0x3e>
 792:	08 95       	ret
 794:	0a 26       	eor	r0, r26
 796:	09 f4       	brne	.+2      	; 0x79a <__fp_cmp+0x3e>
 798:	a1 40       	sbci	r26, 0x01	; 1
 79a:	a6 95       	lsr	r26
 79c:	8f ef       	ldi	r24, 0xFF	; 255
 79e:	81 1d       	adc	r24, r1
 7a0:	81 1d       	adc	r24, r1
 7a2:	08 95       	ret

000007a4 <_exit>:
 7a4:	f8 94       	cli

000007a6 <__stop_program>:
 7a6:	ff cf       	rjmp	.-2      	; 0x7a6 <__stop_program>
